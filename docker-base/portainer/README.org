#+title: Portainer
#+property: header-args :tangle docker-compose.yml

Portainer Community Edition is a lightweight service delivery platform for containerized applications that can be used to manage Docker, Swarm, Kubernetes and ACI environments. It is designed to be as simple to deploy as it is to use. The application allows you to manage all your orchestrator resources (containers, images, volumes, networks and more) through a ‘smart’ GUI and/or an extensive API.

** Docker run
- To make it easy and hassle-free:
~# docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest~

** Docker-compose.yml
*** Docker Image

- Docker Service Name = portainer
- Image: Specify the docker image. No version behind colon meaning it will pull the latest version.
  - portainer-ee for business.
- Container_name: Name that will be given to the container. If not stated, this will be randomized.

#+begin_src yaml
version: '3'

services:
  portainer:
    image: portainer/portainer-ce:latest
    #image: portainer/portainer-ee:latest
    container_name: portainer
#+end_src

*** General

- Restart: The container will always try to restart unless it is manually stopped by the user.

#+begin_src yaml
    restart: unless-stopped
#+end_src

*** Network

- Ports:
  - port 9000 instead of 9443 for portainer business.

#+begin_src yaml
    ports:
      - 8000:8000
      - 9443:9443
      #- 9000:9000
#+end_src

- Networks:
  - This will make use of the same network as Traefik uses.
  - No ports are set here since Traefik will handle this.
#+begin_src
    networks:
      - proxy
#+end_src

*** Variables

- Volumes: Multiple volumes need to be passed through or keep locally. Left volume is a local directory or file. Right volume is a directory or file inside the container.
  - Here we link the website to the container.

#+begin_src yaml
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - </path/to/host/data>:/data
#+end_src

*** Labels

- Labels: Using labels to configure container to use Traefik. Questions: Refer to traefik boilerplate.
- First enable Traefik so it can manage the service.
#+begin_src
    labels:
      - "traefik.enable=true"
#+end_src
- Add a router for unsecure connection.
  - The entrypoint is http.
  - A host domainname is set.
  - A middleware is declare to redirect the unsecure connection to https.
#+begin_src
      - "traefik.http.routers.portainer.entrypoints=http"
      - "traefik.http.routers.portainer.rule=Host(`<wildcard.domain.example>`)"
#+end_src
- Add a router for secure connections.
  - The entrypoint is https.
  - A host domain is set.
  - Enable TLS to get a certificate.
#+begin_src
      - "traefik.http.routers.portainer-secure.entrypoints=https"
      - "traefik.http.routers.portainer-secure.rule=Host(`<wildcard.domain.example>`)"
      - "traefik.http.routers.portainer-secure.tls=true"
      - "traefik.http.routers.portainer-secure.service=portainer"
#+end_src
- Configure the declared middleware.
  - This will redirect unsecure to secure connection.
#+begin_src
      - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
#+end_src
- Configure the service.
  - Declare the service portainer.
  - Income requests will get forwarded to port 9000 (port used by portainer)
#+begin_src
      - "traefik.http.routers.portainer.middlewares=portainer-https-redirect"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
#+end_src
- Network that will be used with the container.
  - This is the same network used by Traefik.
#+begin_src
      - "traefik.docker.network=proxy"
#+end_src

*** Declared Network

- The network "proxy" is already defined under networks. This will create or reference the network.
- It's stated that docker will not need need to create this network since it already should exist. In this case, you should have already created this after setting up Traefik.

#+begin_src
networks:
  proxy:
    external: true
#+end_src

** Notes
*Connecting to docker sockets on other computers/hosts*
- Install portainer agent on the other host (portainer not needed)
  - ~docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent:latest~
  - In portainer nagivate to Environment and Add environment
    - Select Docker and start the wizard
    - Select Agent (not Edge Agent)
    - Give it a name. for example the host name.
    - enter the ip with port :9001
    - Connect and finish
  - Docker environment should not be available @ portainer Home
