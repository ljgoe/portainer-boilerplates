#+title: Authelia

Authelia is an open-source authentication and authorization server and portal fulfilling the identy and access management role of imformation security in providing multi-factor authentication and single sign-on for your applications via a web portal. - https://www.authelia.com/

** Docker-compose.yml
*** Docker Image

- Docker Service Name = authelia
- Image: Specify the docker image. No version behind the colon so it will use the latest version.
- Container_name: Name that will be given to the container. If not stated, this will be randomized.

#+begin_src yaml :tangle docker-compose.yml
version: '3.3'

services:
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
#+end_src

*** Network

  - Ports: 9091 is a dashboard to enable accounts and devices.

#+begin_src yaml :tangle docker-compose.yml
    ports:
      - 9091:9091
#+end_src

*** Variables

- Volumes: Multiple volumes need to be passed trough or keep locally. Left volume is a local directory or file. Right volume is a direcotry or file inside the container.
- Environment:
  - Timezone

#+begin_src yaml :tangle docker-compose.yml
    volumes:
      - <path/to/host/config>:/config
    environment:
      - TZ=Europe/Brussels
#+end_src

** Configuration.yml

#+begin_src yaml :tangle configuration.yaml
---
################################################################
#                    Authelia configuration                    #
################################################################

server:
  host: 0.0.0.0
  port: 9091
log:
  level: debug
theme: dark
# This secret can also be set using the env variables AUTHELIA_JWT_SECRET_FILE
jwt_secret: <string of letters and numbers upto 64>
default_redirection_url: https://<(sub) domain name you will use to redirct>
totp:
  issuer: <name of issuer>

# duo_api:
#  hostname: api-123456789.example.com
#  integration_key: ABCDEF
#  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
#  secret_key: 1234567890abcdefghifjkl

authentication_backend:
  file:
    path: /config/users_database.yml
    password:
      algorithm: argon2id
      iterations: 1
      salt_length: 16
      parallelism: 8
      memory: 64

access_control:
  default_policy: deny
  rules:
    # Rules applied to everyone
    - domain: <(sub) domain name>
      policy: bypass       #will bypass
    - domain: <sub.domain name>
      policy: one_factor   #needs login
    - domain: <sub.domain name>
      policy: two_factor   # needs login and auth

session:
  name: authelia_session
  # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
  secret: unsecure_session_secret
  expiration: 3600  # 1 hour
  inactivity: 300  # 5 minutes
  domain: <domain>  # Should match whatever your root protected domain is

  # redis:
  #   host: redis
  #   port: 6379
  #   # This secret can also be set using the env variables AUTHELIA_SESSION_REDIS_PASSWORD_FILE
  #   # password: authelia

regulation:
  max_retries: 3
  find_time: 120
  ban_time: 300

storage:
  encryption_key: <same string of letters and numbers up to 64> # Now required
  local:
    path: /config/db.sqlite3

notifier:
  # smtp:
  #   username: test
  #   # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
  #   password: password
  #   host: mail.example.com
  #   port: 25
  #   sender: admin@example.com
  filesystem:
    filename: /config/notification.txt
...
#+end_src

** users_database.yml

#+begin_src yaml :tangle users_database.yml
users:
  <username>: #username for user 1. change to whatever you'd like
    displayname: "<username>" #whatever you want the display name to be
    password: "$argon2id$v=$m=,t=,p=$" #generated at https://argon2.online/ or with ~docker run authalia/authalia:latest authalia hash-password '<password>'
    email: <email-address> #whatever your email address is
    groups: #enter the groups you want the user to be part of below
      - admins
      - dev
#any time you add a new user, you will need to restart the Authelia container to recognize the new settings/rules
#+end_src

** Usage

- Dashboard accessible at <host ip>:9091 but it's better to setup with domainname in npm or use the traefik labels.
  - Login with user info. A link will appear in the notification.txt file (in the config folder). Go there and scan the qr with your 2 factor auth app.

*** nging proxy manager

- add rule below to advanced settings of a host proxy:
#+begin_src
location /authelia {
internal;
set $upstream_authelia http://<ip authalia>:9091/api/verify; #change the IP and Port to match the IP and Port of your Authelia container
proxy_pass_request_body off;
proxy_pass $upstream_authelia;
proxy_set_header Content-Length "";

# Timeout if the real server is dead
proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
client_body_buffer_size 128k;
proxy_set_header Host $host;
proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $remote_addr;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-Forwarded-Host $http_host;
proxy_set_header X-Forwarded-Uri $request_uri;
proxy_set_header X-Forwarded-Ssl on;
proxy_redirect  http://  $scheme://;
proxy_http_version 1.1;
proxy_set_header Connection "";
proxy_cache_bypass $cookie_session;
proxy_no_cache $cookie_session;
proxy_buffers 4 32k;

send_timeout 5m;
proxy_read_timeout 240;
proxy_send_timeout 240;
proxy_connect_timeout 240;
}

location / {
set $upstream_<container/service name> $forward_scheme://<ip:port of service>; #change to match your container name: $upstream_some-container-name and send to correct ip
proxy_pass $upstream_<container/service name>; #change to match your container name: $upstream_some-container-name

auth_request /authelia;
auth_request_set $target_url https://$http_host$request_uri;
auth_request_set $user $upstream_http_remote_user;
auth_request_set $email $upstream_http_remote_email;
auth_request_set $groups $upstream_http_remote_groups;
proxy_set_header Remote-User $user;
proxy_set_header Remote-Email $email;
proxy_set_header Remote-Groups $groups;

error_page 401 =302 https://<domain name to authelia dashboard>/?rd=$target_url; #change this to match your authentication domain/subdomain

client_body_buffer_size 128k;

proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;

send_timeout 5m;
proxy_read_timeout 360;
proxy_send_timeout 360;
proxy_connect_timeout 360;

proxy_set_header Host $host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection upgrade;
proxy_set_header Accept-Encoding gzip;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-Forwarded-Host $http_host;
proxy_set_header X-Forwarded-Uri $request_uri;
proxy_set_header X-Forwarded-Ssl on;
proxy_redirect  http://  $scheme://;
proxy_http_version 1.1;
proxy_set_header Connection "";
proxy_cache_bypass $cookie_session;
proxy_no_cache $cookie_session;
proxy_buffers 64 256k;

set_real_ip_from <192.168.0.0 or 10.0.0.0 or 192.168.1.0 ...>/16; #make sure this matches your network setup
real_ip_header CF-Connecting-IP;
real_ip_recursive on;

}
#+end_src
