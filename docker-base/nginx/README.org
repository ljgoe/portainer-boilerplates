#+title: Nginx
#+property: header-args :tangle docker-compose.yml

NGINX is open source software for web serving, reverse proxying, caching, load balancing, media streaming, and more. It started out as a web server designed for maximum performance and stability. In addition to its HTTP server capabilities, NGINX can also function as a proxy server for email (IMAP, POP3, and SMTP) and a reverse proxy and load balancer for HTTP, TCP, and UDP servers.
This boilerplate is mainly used for webserving.

** Prerequisites

- Active Traefik container
- A website

** Docker-compose.yml
*** Docker Image

- Docker Service Name = nginx
- Image: Specify the docker image and behind the colon the tag used. This is the version.
- Container_name: Name that will be given to the container. If not stated, this will be randomized.

#+begin_src yaml
version: '3'

services:
  nginx:
    image: nginx:latest
    container_name: nginx
#+end_src

*** General

- Restart: The container will always try to restart unless it is manually stopped by the user.
- Security_opt: The container will not be able to get extra privileges while it's running.

#+begin_src yaml
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
#+end_src

*** Network

- Networks:
  - This will make use of the same network as Traefik uses.
  - No ports are set here since Traefik will handle this.

#+begin_src
    networks:
      - proxy
#+end_src

#+begin_src
    ports:
      - 80:80
#+end_src

*** Variables

- Volumes: Multiple volumes need to be passed through or keep locally. Left volume is a local directory or file. Right volume is a directory or file inside the container.
  - Here we link the website to the container.

#+begin_src yaml
    volumes:
      #- /etc/localtime:/etc/localtime:ro
      #- /var/run/docker.sock:/var/run/docker.sock:ro
      - </path/to/host/website>:/usr/share/nginx/html
#+end_src

*** Labels

- Labels: Using labels to configure container to use Traefik. Questions: Refer to traefik boilerplate.
- First enable Traefik so it can manage the service.
#+begin_src
    labels:
      - "traefik.enable=true"
#+end_src
- Add a router for unsecure connection.
  - The entrypoint is http.
  - A host domainname is set.
  - A middleware is declare to redirect the unsecure connection to https.
#+begin_src
      - "traefik.http.routers.nginx.entrypoints=http"
      - "traefik.http.routers.nginx.rule=Host(`<wildcard.domain.example>`)"
      - "traefik.http.middlewares.nginx-https-redirect.redirectscheme.scheme=https"
#+end_src
- Add a router for secure connections.
  - The entrypoint is https.
  - A host domain is set.
  - Enable TLS to get a certificate.
#+begin_src
      - "traefik.http.routers.nginx-secure.entrypoints=https"
      - "traefik.http.routers.nginx-secure.rule=Host(`<wildcard.domain.example>`)"
      - "traefik.http.routers.nginx-secure.tls=true"
#+end_src
- Configure the declared middleware.
  - This will redirect unsecure to secure connection.
#+begin_src
      - "traefik.http.routers.nginx.middlewares=nginx-https-redirect"
#+end_src
- Configure the service.
  - Declare the service nginx.
  - Income requests will get forwarded to port 80 (port used by nginx)
#+begin_src
      - "traefik.http.routers.nginx-secure.service=nginx"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
#+end_src
- Network that will be used with the container.
  - This is the same network used by Traefik.
#+begin_src
      - "traefik.docker.network=proxy"
#+end_src

*** Declared network

- The network "proxy" is already defined under networks. This will create or reference the network.
- It's stated that docker will not need need to create this network since it already should exist. In this case, you should have already created this after setting up Traefik.

#+begin_src
networks:
  proxy:
    external: true
#+end_src

** Extras
- Add 404 page:
  - ~$ vim /etc/nginx/conf.d/default.conf~
  - Insert between ~Server {  }~:
#+begin_src
error_page 404 403 500 503 /<404name>.html;
location = /<404name>.html {
        root /usr/share/nginx/html;
        internal;
}
#+end_src
