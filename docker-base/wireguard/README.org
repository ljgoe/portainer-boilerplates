#+title: WireGuard
#+property: header-args :tangle docker-compose.yml

WireGuard is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache.

** Prerequisites

- Forward port 51820 on your modem/router to the device ip running Wireguard.
- Create a new subdomain on your dns resolver that points to your public ip and disable proxy.
- Locally hosted services might not be accessible because the firewall of the device blocks it. Allow these port on the firewall.

** Docker-compose.yml
*** Docker Image

- Docker Service Name = wireguard
- Image: Specify the docker image and behind the colon the tag used. This is the version.
- Container_name: Name that will be given to the container. If not stated, this will be randomized.

#+begin_src yaml
version: "2.1"

services:
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard
#+end_src

*** General

- Restart: The container will always try to restart unless it is manually stopped by the user.
- Sysctls: Some of these sysctl settings need to set for a client to actually be able to connect to wireguard, otherwise the host system might block it.
- Cap_add: Adds linux capabilities

#+begin_src yaml
    restart: unless-stopped
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
#+end_src

*** Network

- Networks: Setting up a network that can be accessed by Pihole and WireGuard.
  - This is useful if you want to use Pihole while connected to your VPN.
  - Setting a static-ip so it can be reference in the WireGuard docker-compose.yml file.
- Ports: port 51820 is used by WireGuard

#+begin_src yaml
    # Network only needed if you want to use pihole while connected to the WireGuard VPN.
    networks:
      wireguard-pihole:
        ipv4_address: 172.20.0.3
    ports:
      - 51820:51820/udp
#+end_src

*** Variables

- Volumes: Multiple volumes need to be passed through or keep locally. Left volume is a local directory or file. Right volume is a directory or file inside the container.
  - Here we link the website to the container.
- Environments:
  - PUID AND PGID
  - Timezone
  - Add serverurl
  - Port = 51820
  - Choose how many different devices can connect to network using an integer or string.
  - Optional:
    - Peerdns is useful if you have for example pihole. If you want to use the default dns of wireguard change it to "auto".
    - Internal subnet can be kept default.
    - Allowedip can be specified.
      - In this example everything gets tunnelled (ipv4 and ipv6).
    - Enable logging or not.

#+begin_src yaml
    volumes:
      - </path/to/host/config>:/config
      - /lib/modules:/lib/modules
    environment:
      - PUID=<$ id -u>
      - PGID=<$ id -g>
      - TZ=Europe/Brussels
      - SERVERURL=<wildcard.domain.example>
      - SERVERPORT=51820
      #- PEERS=desktop,laptop
      - PEERS=1
      - PEERDNS=172.20.0.2
      #- PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=0.0.0.0/0,::/0
      - LOG_CONFS=true
#+end_src

*** Declared Network

- Create (if it does not exist) a network that can be used by Pihole and WireGuard
  - This is useful if you want to use Pihole while connected to your VPN.

#+begin_src yaml
# Network only needed if you want to use pihole while connected to the WireGuard VPN.
networks:
   wireguard-pihole:
     name: "wireguard-pihole"
     driver: bridge
     ipam:
       driver: default
       config:
         - subnet: 172.20.0.0/24
#+end_src

** Usage
- Change peers depending on how many devices you want to connect.
- Computer:
  - Install wireguard on device https://www.wireguard.com/install/
  - Check that static ip and dns is still relevant, otherwise just use DHCP and default DNS.
  - Connect with computer use file located: ~</path/to/host/config>/peer<number>/peer<number/name>.conf~. If running in vm use secure copy protocol: ~scp root@<ip>:<path> <path/to/local>~.
    - GUI: Upload the file to the GUI interface and connect.
    - CLI: ~$ sudo mv peer<number/name>.conf /etc/wireguard/wg0.conf~ (create path if it does not exist) and run ~$ wg-quick up wg0~
- Phone:
  - Generate QR to connect smartphone: ~$ docker exec -it wireguard /app/show-peer <number/name>~
    - Inside portainer: The terminal will also print the qr-code on initial startup

** Notes
- Depending on the system you might need to allow ip forwarding. ~# sysctl net.ipv4.ip_forward=1~
  - Uncomment/add ~net.ipv4.ip_forward = 1~ for permanent change at ~/etc/sysctl.conf~
  - Changes need to made for host and vm/lxc.
- If running in an lxc container, it's best to keep it unprivileged.
